# name: Sharedhosting deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout del repositorio
#       uses: actions/checkout@v2

#     - name: Configurar entorno PHP
#       uses: shivammathur/setup-php@v2
#       with:
#         php-version: '8.2'

#     - name: Install dependencies
#       run: composer install --no-dev --prefer-dist --no-scripts --no-progress --no-suggest

#     - name: Configure env and run migrations
#       env:
#         FTP_HOST: ${{ secrets.FTP_HOST }}
#         FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
#         FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
#         FTP_DESTINATION: ${{ secrets.FTP_DESTINATION }}
#       run: |
#         php artisan config:cache
#         php artisan migrate --force
#         php artisan db:seed --force

#     - name: Deploy to shared hosting
#       uses: SamKirkland/FTP-Deploy-Action@v4.3.4
#       with:
#         server: ${{ secrets.FTP_HOST }}
#         username: ${{ secrets.FTP_USERNAME }}
#         password: ${{ secrets.FTP_PASSWORD }}
#         server-dir: ${{ secrets.FTP_DESTINATION }}/

name: Deploy Laravel to Production

on:
  push:
    branches:
      - main # O la rama que uses para producción

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to Server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navega al directorio del proyecto
          cd ${{ secrets.PROJECT_PATH }}

          # 1. Poner la aplicación en modo mantenimiento
          php artisan down || true

          # 2. Obtener el código más reciente
          git reset --hard origin/main
          git pull origin main

          # 3. Instalar dependencias de Composer
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

          # 4. Limpiar TODAS las cachés de Laravel
          php artisan optimize:clear

          # 5. Ejecutar migraciones de la base de datos
          php artisan migrate --force

          # 6. Reconstruir la caché para producción
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # 7. Reiniciar PHP-FPM para limpiar la caché OPcache del servidor
          echo "Reiniciando PHP-FPM para aplicar los cambios..."
          sudo systemctl restart php8.4-fpm

          # 8. Sacar la aplicación del modo mantenimiento
          php artisan up
          
          echo "✅ ¡Despliegue completado exitosamente!"
